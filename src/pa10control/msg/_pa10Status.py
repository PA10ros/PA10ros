"""autogenerated by genmsg_py from pa10Status.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class pa10Status(roslib.message.Message):
  _md5sum = "e56ad4b4432858c0c1d2f803ffcfd271"
  _type = "pa10control/pa10Status"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint16[7] alarmCode
bool[7] enabledAxes
float64[7] position
float64[7] velocity
float64[7] torque
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','alarmCode','enabledAxes','position','velocity','torque']
  _slot_types = ['Header','uint16[7]','bool[7]','float64[7]','float64[7]','float64[7]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,alarmCode,enabledAxes,position,velocity,torque
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(pa10Status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.alarmCode is None:
        self.alarmCode = [0,0,0,0,0,0,0]
      if self.enabledAxes is None:
        self.enabledAxes = [False,False,False,False,False,False,False]
      if self.position is None:
        self.position = [0.,0.,0.,0.,0.,0.,0.]
      if self.velocity is None:
        self.velocity = [0.,0.,0.,0.,0.,0.,0.]
      if self.torque is None:
        self.torque = [0.,0.,0.,0.,0.,0.,0.]
    else:
      self.header = std_msgs.msg._Header.Header()
      self.alarmCode = [0,0,0,0,0,0,0]
      self.enabledAxes = [False,False,False,False,False,False,False]
      self.position = [0.,0.,0.,0.,0.,0.,0.]
      self.velocity = [0.,0.,0.,0.,0.,0.,0.]
      self.torque = [0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_7H.pack(*self.alarmCode))
      buff.write(_struct_7B.pack(*self.enabledAxes))
      buff.write(_struct_7d.pack(*self.position))
      buff.write(_struct_7d.pack(*self.velocity))
      buff.write(_struct_7d.pack(*self.torque))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 14
      self.alarmCode = _struct_7H.unpack(str[start:end])
      start = end
      end += 7
      self.enabledAxes = _struct_7B.unpack(str[start:end])
      self.enabledAxes = map(bool, self.enabledAxes)
      start = end
      end += 56
      self.position = _struct_7d.unpack(str[start:end])
      start = end
      end += 56
      self.velocity = _struct_7d.unpack(str[start:end])
      start = end
      end += 56
      self.torque = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.alarmCode.tostring())
      buff.write(self.enabledAxes.tostring())
      buff.write(self.position.tostring())
      buff.write(self.velocity.tostring())
      buff.write(self.torque.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 14
      self.alarmCode = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=7)
      start = end
      end += 7
      self.enabledAxes = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=7)
      self.enabledAxes = map(bool, self.enabledAxes)
      start = end
      end += 56
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.torque = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_7B = struct.Struct("<7B")
_struct_7H = struct.Struct("<7H")
